import matplotlib.pyplot as plt
import requests
import random
import itertools
import threading
import string
import time
import sys
import numpy as np
import pyfiglet
import os
import colorama
from colorama import Fore, Style, init,Back

colorama.init(convert=True)

HEADER = {'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7'}

def req():
    try:  # Check if the requrements have been installed
        from colorama import Fore, Style, init,Back  # Try to import colorama
    except ImportError:  # If it chould not be installed
        # Tell the user it has not been installed and how to install it
        input(
            f"Module colorama not installed, to install run '{'py -3' if os.name == 'nt' else 'python3.8'} -m pip install colorama'")
    try:  # Setup try statement to catch the error
        import requests  # Try to import requests
    except ImportError:  # If it has not been installed
        # Tell the user it has not been installed and how to install it
        input(
            f"Module requests not installed, to install run '{'py -3' if os.name == 'nt' else 'python3.8'} -m pip install requests'\nPress enter to exit")
        exit()  # Exit the program
    try:  # Setup try statement to catch the error
        import numpy  # Try to import requests
    except ImportError:  # If it has not been installed
        # Tell the user it has not been installed and how to install it
        input(
            f"Module numpy not installed, to install run '{'py -3' if os.name == 'nt' else 'python3.8'} -m pip install numpy'\nPress enter to exit")
        exit()  # Exit the program


num = random.randint(10, 1000)
num2 = random.randint(100, 500)
time.sleep(1)
os.system("CLS")
os.system(f"title Connected as [User{num}]")
os.system("CLS")

animation_finished = False
animation_finished2 = False
animation_finished3 = False

def animation():
 for x in itertools.cycle(['|', '/', '-', '\\']):
    if animation_finished:
            break
    sys.stdout.write(f'\r{Fore.BLUE}[RevX] {Fore.GREEN}Checking RevX For Updates {Fore.RESET}' + x)
    sys.stdout.flush()
    time.sleep(0.1)

def animation2():
 for x in itertools.cycle(['|', '/', '-', '\\']):
    if animation_finished2:
            break
    sys.stdout.write(f'\r{Fore.BLUE}[RevX] {Fore.GREEN}Connecting to Discord Socket {Fore.RESET}' + x)
    sys.stdout.flush()
    time.sleep(0.1)

def animation3():
 for x in itertools.cycle(['|', '/', '-', '\\']):
    if animation_finished3:
            break
    sys.stdout.write(f'\r{Fore.BLUE}[RevX] {Fore.GREEN}Scraping currently {num2} Proxies {Fore.RESET}' + x)
    sys.stdout.flush()
    time.sleep(0.1)

t = threading.Thread(target=animation)
t.start()
time.sleep(5)
animation_finished = True

t = threading.Thread(target=animation2)
threading.Thread(target=req()).start()
t.start()
time.sleep(5)
animation_finished2 = True

def printSlow(text):
    for char in text:
        print(char, end="")
        sys.stdout.flush()
        time.sleep(.01)

def proxy_scrapehttp():
    temp = os.getenv("temp")+"\\proxies78.txt"
    r = requests.get("https://api.proxyscrape.com/v2/?request=getproxies&protocol=http&timeout=50&country=all&ssl=no&anonymity=elite&simplified=true",headers=HEADER)
    with open(temp, "wb") as f:
        f.write(r.content)
   

def httpproxy():
    temp = os.getenv("temp") + "\\proxies78.txt"
    if not os.path.exists(temp):
        with open(temp, "w") as f:
            f.close()
    if os.stat(temp).st_size == 0:
        proxy_scrapehttp()
    proxies = open(temp).read().split('\n')
    proxy = proxies[1]

    with open(temp, 'r+') as fp:
        lines = fp.readlines()
        fp.seek(0)
        fp.truncate()
        fp.writelines(lines[1:])
    return proxy

t = threading.Thread(target=animation3)
threading.Thread(target=proxy_scrapehttp()).start()
t.start()
time.sleep(5)
os.system("CLS")
print(f"{Fore.GREEN}[Connected!]")
animation_finished3 = True
os.system("CLS")
time.sleep(2)    

print(f"""{Fore.WHITE}
__________                                       ____  ___
\______   \ _______  __ ___________  ______ ____ \   \/  /
 |       _// __ \  \/ // __ \_  __ \/  ___// __ \ \     / 
 |    |   \  ___/\   /\  ___/|  | \/\___ \\  ___/ /     \ 
 |____|_  /\___  >\_/  \___  >__|  /____  >\___  >___/\  |
        \/     \/          \/           \/     \/      \_/
                                                                                            
""")
printSlow(f"{Fore.GREEN} Connected as {Fore.YELLOW}[User{num}]")
printSlow(f"\n{Fore.GREEN} Version {Fore.YELLOW}1.0")
print(f"""{Fore.RESET}

 ╦═════════════════════════╦
 ║[1] - Generate and check ║                         
 ║[2] - Only generate      ║  
 ║[3] - Exit               ║                                               
 ╩═════════════════════════╩
""")

# ONLY GENERATOR

def onlygen():
    for i in range(codesperthread):
        code = ("".join(random.choices(string.ascii_uppercase + string.digits + string.ascii_lowercase, k=16)))
        nitrourl = "https://discord.gift/" + code
        print(np.array(f"{Fore.YELLOW} [UNCHECKED] {Fore.GREEN}" +  nitrourl))

# NITRO GENERATOR CHECKER

def generatecodes():
    proxo = httpproxy()
    proxies = {
        "http": proxo
    }
    for i in range(codesperthread):
        code = ("".join(random.choices(string.ascii_uppercase + string.digits + string.ascii_lowercase, k=16)))
        url = "https://discordapp.com/api/v9/entitlements/gift-codes/" + code + "?with_application=false&with_subscription_plan=true"
        nitrourl = "https://discord.gift/" + code

        request = requests.get(url, proxies=proxies, headers=HEADER)

        if request.status_code == 429:
            print(f"{Fore.YELLOW}RevX hit the Discord ratelimit, Please wait!{Fore.RESET}")
            time.sleep(60)
            proxy_scrapehttp()
            proxo = httpproxy()
            proxies = {
                "http": proxo,
            }
        elif request.status_code == 200:
            print(np.array(f"{Fore.LIGHTGREEN_EX}[WORKING] {Fore.GREEN}" + nitrourl))                     
        else:
            print(F"{Fore.RED}[NOT WORKING] {Fore.GREEN}" + nitrourl)

#INPUTS    
        
mode = input(f"{Fore.LIGHTBLUE_EX}\n [{Fore.GREEN}+{Fore.LIGHTBLUE_EX}]{Fore.YELLOW} Choice: {Fore.RESET}")
gens = int(input(np.array((f'{Fore.LIGHTBLUE_EX} [{Fore.GREEN}+{Fore.LIGHTBLUE_EX}]{Fore.YELLOW} Input How Many Codes to Generate and Check: {Fore.RESET}'))))
threadsnumber = input(f"{Fore.LIGHTBLUE_EX} [{Fore.GREEN}+{Fore.LIGHTBLUE_EX}]{Fore.YELLOW} How many threads to use: {Fore.RESET}")
print('---------------------------------------------------------------------------------------')
threadsnumber = int(threadsnumber)
codesperthread = gens/threadsnumber
codesperthread = int(codesperthread)

#MODES

if (mode == "1"):
    os.system("CLS")
    for i in range(threadsnumber):
        threading.Thread(target=generatecodes).start()

if (mode == "2"):
    os.system("CLS")
    for i in range(threadsnumber):
        threading.Thread(target=onlygen).start()

if (mode == "3"):
    os.system("CLS")
    printSlow(f"{Fore.GREEN}Thanks for using{Fore.BLUE} [ReverseX]")
    time.sleep(3)
    exit()           
