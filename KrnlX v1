import matplotlib.pyplot as plt
import requests
import random
import itertools
import threading
import string
import time
import sys
import numpy as np
import pyfiglet
import os
import colorama
from colorama import Fore, Style, init,Back

num = random.randint(10, 1000)
num2 = random.randint(100, 500)

def printSlow(text):
    for char in text:
        print(char, end="")
        sys.stdout.flush()
        time.sleep(.01)

os.system("CLS")
time.sleep(2)    

print(f"""{Fore.WHITE}
__________                                       ____  ___
\______   \ _______  __ ___________  ______ ____ \   \/  /
 |       _// __ \  \/ // __ \_  __ \/  ___// __ \ \     / 
 |    |   \  ___/\   /\  ___/|  | \/\___ \\  ___/ /     \ 
 |____|_  /\___  >\_/  \___  >__|  /____  >\___  >___/\  |
        \/     \/          \/           \/     \/      \_/
                                                                                            
""")
printSlow(f"{Fore.GREEN} Connected as {Fore.YELLOW}[User{num}]")
printSlow(f"\n{Fore.GREEN} Version {Fore.YELLOW}1.0")
print(f"""{Fore.RESET}

 ╦═════════════════════════╦
 ║[1] - Generate and check ║                         
 ║[2] - Only generate      ║  
 ║[3] - Exit               ║                                               
 ╩═════════════════════════╩
""")

# ONLY GENERATOR

def onlygen():
    for i in range(codesperthread):
        code = ("".join(random.choices(string.ascii_uppercase + string.digits + string.ascii_lowercase, k=16)))
        nitrourl = "https://discord.gift/" + code
        print(np.array(f"{Fore.YELLOW} [UNCHECKED] {Fore.RESET}" + nitrourl))

# NITRO GENERATOR CHECKER

def generatecodes():
    proxo = httpproxy()
    proxies = {
        "http": proxo
    }
    for i in range(codesperthread):
        code = ("".join(random.choices(string.ascii_uppercase + string.digits + string.ascii_lowercase, k=16)))
        url = "https://discordapp.com/api/v9/entitlements/gift-codes/" + code + "?with_application=false&with_subscription_plan=true"
        nitrourl = "https://discord.gift/" + code

        request = requests.get(url, proxies=proxies, headers=HEADER)

        if request.status_code == 429:
            print(f"{Fore.YELLOW}RevX hit the Discord ratelimit, Please wait!{Fore.RESET}")
            time.sleep(60)
            proxy_scrapehttp()
            proxo = httpproxy()
            proxies = {
                "http": proxo,
            }
        elif request.status_code == 200:
            print(np.array(f"{Fore.LIGHTGREEN_EX}[WORKING] {Fore.RESET}" + nitrourl))                     
        else:
            print(F"{Fore.RED}[NOT WORKING] {Fore.RESET}" + nitrourl)

#INPUTS    
        
mode = input(f"{Fore.LIGHTBLUE_EX}\n [{Fore.GREEN}+{Fore.LIGHTBLUE_EX}]{Fore.RESET} Choice: ")
gens = int(input(np.array((f'{Fore.LIGHTBLUE_EX}\n [{Fore.GREEN}+{Fore.LIGHTBLUE_EX}]{Fore.RESET} Input How Many Codes to Generate and Check: '))))
threadsnumber = input(f"{Fore.LIGHTBLUE_EX}\n [{Fore.GREEN}+{Fore.LIGHTBLUE_EX}]{Fore.RESET} How many threads to use: ")
print('---------------------------------------------------------------------------------------')
threadsnumber = int(threadsnumber)
codesperthread = gens/threadsnumber
codesperthread = int(codesperthread)

#MODES

if (mode == "1"):
    os.system("CLS")
    for i in range(threadsnumber):
        threading.Thread(target=generatecodes).start()

if (mode == "2"):
    os.system("CLS")
    for i in range(threadsnumber):
        threading.Thread(target=onlygen).start()

if (mode == "3"):
    os.system("CLS")
    printSlow(f"{Fore.GREEN}Thanks for using{Fore.BLUE} [ReverseX]")
    time.sleep(3)
    exit()           
